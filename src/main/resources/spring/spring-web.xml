<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mcv="http://www.springframework.org/schema/cache"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">
    <!--配置springMVC-->
    <!--1、开启springMVC注解模式-->
    <!--简化配置：
    （1）、自动注册DefaultAnnotationHandlerMapping，AnnotationMethodHandlerAdapter
     (2)、提供一系列的功能：数字和日期的format @NumberFormat @DateTimeFormat
                         XML和JSON的数据支持-->
    <mvc:annotation-driven/>
    <!--servlet-mapping 映射路径："/"-->
    <!--2、静态资源默认servlet配置
            1、加入对静态资源的处理: js、gif、png
            2、允许使用"/"作为整体映射-->
    <mvc:default-servlet-handler/>
    <mvc:resources mapping="/js/**" location="/WEB-INF/static/js/"/>
    <mvc:resources mapping="/img/**" location="/WEB-INF/static/img/"/>

    <!--3、配置jsp 显示ViewResolver-->
<!--    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>-->


    <!--4、扫描web相关的bean-->
    <context:component-scan base-package="hcf.seckill.controller"/>


    <!-- 5. 引入thymeleaf-->
    <bean id="templateResolver" class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
        <property name="prefix" value="/WEB-INF/static/"/>
        <property name="suffix" value=".html"/>
        <property name="templateMode" value="HTML"/>
        <property name="cacheable" value="false"/>
        <property name="characterEncoding" value="utf-8"/>
    </bean>

    <bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver"/>
    </bean>

    <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine"/>
        <property name="characterEncoding" value="utf-8"/>
    </bean>

    <!--6、配置多模板引擎 ： jsp, thymeleaf 的 ViewResolver
    http://t.csdn.cn/QAhUq
        ContentNegotiatingViewResolver可以“智能”地为我们选择视图解析器，所以ContentNegotiatingViewResolver中可以囊括多个视图解析器
    -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="viewResolvers">
            <list>
                <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
                    <property name="characterEncoding" value="utf-8"/>
                    <property name="templateEngine" ref="templateEngine"/>
                    <property name="viewNames" value="html/*"/> <!--关键点-->
                    <property name="order" value="2"/>
                </bean>

                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="prefix" value="/WEB-INF/"/>
                    <property name="suffix" value=".jsp"/>
                    <property name="viewNames" value="jsp/*"/>  <!--关键点-->
                    <property name="order" value="1"/>
                </bean>
            </list>
        </property>
    </bean>




</beans>